/**
 * ---------------------------------------------------------------------------------
 * This file has been generated by Sanity TypeGen.
 * Command: `sanity typegen generate`
 *
 * Any modifications made directly to this file will be overwritten the next time
 * the TypeScript definitions are generated. Please make changes to the Sanity
 * schema definitions and/or GROQ queries if you need to update these types.
 *
 * For more information on how to use Sanity TypeGen, visit the official documentation:
 * https://www.sanity.io/docs/sanity-typegen
 * ---------------------------------------------------------------------------------
 */

// Source: schema.json
export type SanityImagePaletteSwatch = {
  _type: 'sanity.imagePaletteSwatch'
  background?: string
  foreground?: string
  population?: number
  title?: string
}

export type SanityImagePalette = {
  _type: 'sanity.imagePalette'
  darkMuted?: SanityImagePaletteSwatch
  lightVibrant?: SanityImagePaletteSwatch
  darkVibrant?: SanityImagePaletteSwatch
  vibrant?: SanityImagePaletteSwatch
  dominant?: SanityImagePaletteSwatch
  lightMuted?: SanityImagePaletteSwatch
  muted?: SanityImagePaletteSwatch
}

export type SanityImageDimensions = {
  _type: 'sanity.imageDimensions'
  height?: number
  width?: number
  aspectRatio?: number
}

export type SanityFileAsset = {
  _id: string
  _type: 'sanity.fileAsset'
  _createdAt: string
  _updatedAt: string
  _rev: string
  originalFilename?: string
  label?: string
  title?: string
  description?: string
  altText?: string
  sha1hash?: string
  extension?: string
  mimeType?: string
  size?: number
  assetId?: string
  uploadId?: string
  path?: string
  url?: string
  source?: SanityAssetSourceData
}

export type Geopoint = {
  _type: 'geopoint'
  lat?: number
  lng?: number
  alt?: number
}

export type BlogPost = {
  _id: string
  _type: 'blogPost'
  _createdAt: string
  _updatedAt: string
  _rev: string
  title?: string
  excerpt?: string
  featured?: boolean
  mainImage?: ResponsiveAsset
  body?: Array<
    | {
        children?: Array<{
          marks?: Array<string>
          text?: string
          _type: 'span'
          _key: string
        }>
        style?:
          | 'normal'
          | 'h1'
          | 'h2'
          | 'h3'
          | 'h4'
          | 'h5'
          | 'h6'
          | 'blockquote'
        listItem?: 'bullet' | 'number'
        markDefs?: Array<{
          href?: string
          _type: 'link'
          _key: string
        }>
        level?: number
        _type: 'block'
        _key: string
      }
    | {
        asset?: {
          _ref: string
          _type: 'reference'
          _weak?: boolean
          [internalGroqTypeReferenceTo]?: 'sanity.imageAsset'
        }
        hotspot?: SanityImageHotspot
        crop?: SanityImageCrop
        _type: 'image'
        _key: string
      }
    | ({
        _key: string
      } & SectionBlock)
  >
  timeToRead?: number
  releaseTime?: string
  categories?: Array<{
    _ref: string
    _type: 'reference'
    _weak?: boolean
    _key: string
    [internalGroqTypeReferenceTo]?: 'blogCategory'
  }>
}

export type Style = {
  _type: 'style'
  media?: string
  nonce?: string
  title?: string
  id?: string
}

export type Script = {
  _type: 'script'
  async?: boolean
  crossorigin?: 'anonymous' | 'use-credentials'
  defer?: boolean
  fetchpriority?: 'high' | 'low' | 'auto'
  integrity?: string
  nomodule?: boolean
  referrerpolicy?:
    | 'no-referrer'
    | 'no-referrer-when-downgrade'
    | 'origin'
    | 'origin-when-cross-origin'
    | 'same-origin'
    | 'strict-origin'
    | 'strict-origin-when-cross-origin'
    | 'unsafe-url'
  src?: string
  type?:
    | 'text/javascript'
    | 'module'
    | 'application/json'
    | 'application/ld+json'
    | 'speculationrules'
  id?: string
}

export type Noscript = {
  _type: 'noscript'
  id?: string
  class?: string
  style?: string
}

export type MetaFlatProfile = {
  _type: 'metaFlatProfile'
  profileFirstName?: string
  profileGender?: 'male' | 'female'
  profileLastName?: string
  profileUsername?: string
}

export type MetaFlatBook = {
  _type: 'metaFlatBook'
  bookAuthor?: Array<string>
  bookIsbn?: string
  bookReleaseDate?: string
  bookTag?: Array<string>
}

export type MetaFlatArticle = {
  _type: 'metaFlatArticle'
  articleAuthor?: Array<string>
  articleExpirationTime?: string
  articleModifiedTime?: string
  articlePublishedTime?: string
  articleSection?: string
  articleTag?: Array<string>
}

export type Robots = {
  _type: 'robots'
  index?: boolean
  follow?: boolean
  all?: boolean
  noindex?: boolean
  nofollow?: boolean
  none?: boolean
  noarchive?: boolean
  nositelinkssearchbox?: boolean
  nosnippet?: boolean
  indexifembedded?: boolean
  maxSnippet?: number
  maxImagePreview?: 'none' | 'standard' | 'large'
  maxVideoPreview?: number
  notranslate?: boolean
  unavailable_after?: string
  noimageindex?: boolean
}

export type Viewport = {
  _type: 'viewport'
  width?: string
  height?: string
  initialScale?: string
  maximumScale?: string
  minimumScale?: string
  userScalable?: string
  viewportFit?: 'auto' | 'contain' | 'cover'
}

export type Meta = {
  _type: 'meta'
  charset?: 'utf-8'
  content?: string
  httpEquiv?:
    | 'content-security-policy'
    | 'content-type'
    | 'default-style'
    | 'x-ua-compatible'
    | 'refresh'
    | 'accept-ch'
  name?: 'viewport' | 'description' | 'keywords' | 'author' | 'generator'
  property?:
    | 'og:title'
    | 'og:description'
    | 'og:image'
    | 'twitter:title'
    | 'twitter:description'
    | 'twitter:image'
  id?: string
  media?: '(prefers-color-scheme: light)' | '(prefers-color-scheme: dark)'
}

export type Link = {
  _type: 'link'
  as?:
    | 'audio'
    | 'document'
    | 'embed'
    | 'fetch'
    | 'font'
    | 'image'
    | 'object'
    | 'script'
    | 'style'
    | 'track'
    | 'video'
    | 'worker'
  color?: string
  crossorigin?: 'anonymous' | 'use-credentials'
  fetchpriority?: 'high' | 'low' | 'auto'
  href?: string
  hreflang?: string
  imagesizes?: string
  imagesrcset?: string
  integrity?: string
  media?: string
  prefetch?: string
  referrerpolicy?: string
  rel?: string
  sizes?: string
  title?: string
  type?: string
  id?: string
  onabort?: string
  onerror?: string
  onload?: string
  onprogress?: string
  onloadstart?: string
  dataAttributes?: Array<{
    key?: string
    value?: string
    _key: string
  }>
}

export type MetaFlat = {
  _type: 'metaFlat'
  charset?: 'utf-8'
  description?: string
  colorScheme?: 'normal' | 'light dark' | 'dark light' | 'only light'
  applicationName?: string
  author?: string
  creator?: string
  publisher?: string
  generator?: string
  referrer?:
    | 'no-referrer'
    | 'no-referrer-when-downgrade'
    | 'same-origin'
    | 'origin'
    | 'strict-origin'
    | 'origin-when-cross-origin'
    | 'strict-origin-when-cross-origin'
    | 'unsafe-url'
  viewport?: Viewport
  robots?: Robots
  google?: 'nositelinkssearchbox' | 'nopagereadaloud'
  googlebot?:
    | 'notranslate'
    | 'noimageindex'
    | 'noarchive'
    | 'nosnippet'
    | 'max-snippet'
    | 'max-image-preview'
    | 'max-video-preview'
  googlebotNews?: 'noindex' | 'nosnippet' | 'notranslate' | 'noimageindex'
  googleSiteVerification?: string
  rating?: 'adult'
  ogUrl?: string
  ogTitle?: string
  ogDescription?: string
  ogType?:
    | 'website'
    | 'article'
    | 'book'
    | 'profile'
    | 'music.song'
    | 'music.album'
    | 'music.playlist'
    | 'music.radio_status'
    | 'video.movie'
    | 'video.episode'
    | 'video.tv_show'
    | 'video.other'
  ogLocale?: string
  ogLocaleAlternate?: Array<string>
  ogDeterminer?: 'a' | 'an' | 'the' | '' | 'auto'
  ogSiteName?: string
  ogVideo?: string
  ogVideoUrl?: string
  ogVideoSecureUrl?: string
  ogVideoType?: 'application/x-shockwave-flash' | 'video/mp4'
  ogVideoWidth?: number
  ogVideoHeight?: number
  ogVideoAlt?: string
  ogImage?: string
  ogImageUrl?: string
  ogImageSecureUrl?: string
  ogImageType?: 'image/jpeg' | 'image/gif' | 'image/png'
  ogImageWidth?: number
  ogImageHeight?: number
  ogImageAlt?: string
  ogAudio?: string
  ogAudioUrl?: string
  ogAudioSecureUrl?: string
  ogAudioType?: 'audio/mpeg' | 'audio/ogg' | 'audio/wav'
  fbAppId?: string
  twitterCard?: 'summary' | 'summary_large_image' | 'app' | 'player'
  twitterTitle?: string
  twitterDescription?: string
  twitterImage?: string
  twitterImageAlt?: string
  twitterSite?: string
  twitterSiteId?: string
  twitterCreator?: string
  twitterCreatorId?: string
  twitterPlayer?: string
  twitterPlayerWidth?: number
  twitterPlayerHeight?: number
  twitterPlayerStream?: string
  twitterAppNameIphone?: string
  twitterAppIdIphone?: string
  twitterAppUrlIphone?: string
  twitterAppNameIpad?: string
  twitterAppIdIpad?: string
  twitterAppUrlIpad?: string
  twitterAppNameGoogleplay?: string
  twitterAppIdGoogleplay?: string
  twitterAppUrlGoogleplay?: string
  twitterData1?: string
  twitterLabel1?: string
  twitterData2?: string
  twitterLabel2?: string
  themeColor?: string
  mobileWebAppCapable?: string
  appleMobileWebAppCapable?: string
  appleMobileWebAppStatusBarStyle?: 'default' | 'black' | 'black-translucent'
  appleMobileWebAppTitle?: string
  appleItunesApp?: string
  formatDetection?: string
  msapplicationTileImage?: string
  msapplicationTileColor?: string
  msapplicationConfig?: string
  contentSecurityPolicy?: string
  contentType?: string
  defaultStyle?: string
  xUaCompatible?: string
  refresh?: string
  keywords?: string
  articleMetadata?: MetaFlatArticle
  bookMetadata?: MetaFlatBook
  profileMetadata?: MetaFlatProfile
}

export type ResponsiveAsset = {
  _type: 'responsiveAsset'
  name?: string
  slug?: Slug
  altText?: string
  assetType?: 'image' | 'video'
  mobileAsset?: {
    asset?: {
      _ref: string
      _type: 'reference'
      _weak?: boolean
      [internalGroqTypeReferenceTo]?: 'sanity.imageAsset'
    }
    hotspot?: SanityImageHotspot
    crop?: SanityImageCrop
    caption?: string
    poster?: {
      asset?: {
        _ref: string
        _type: 'reference'
        _weak?: boolean
        [internalGroqTypeReferenceTo]?: 'sanity.imageAsset'
      }
      hotspot?: SanityImageHotspot
      crop?: SanityImageCrop
      _type: 'image'
    }
    _type: 'image'
  }
  desktopAsset?: {
    asset?: {
      _ref: string
      _type: 'reference'
      _weak?: boolean
      [internalGroqTypeReferenceTo]?: 'sanity.imageAsset'
    }
    hotspot?: SanityImageHotspot
    crop?: SanityImageCrop
    caption?: string
    poster?: {
      asset?: {
        _ref: string
        _type: 'reference'
        _weak?: boolean
        [internalGroqTypeReferenceTo]?: 'sanity.imageAsset'
      }
      hotspot?: SanityImageHotspot
      crop?: SanityImageCrop
      _type: 'image'
    }
    _type: 'image'
  }
}

export type BodyAttrs = {
  _type: 'bodyAttrs'
  class?: string
  style?: string
  onload?: string
  onunload?: string
}

export type HtmlAttrs = {
  _type: 'htmlAttrs'
  class?: string
}

export type Base = {
  _type: 'base'
  href?: string
  target?: string
}

export type TemplateParams = {
  _type: 'templateParams'
  separator?: '|' | '-' | '\xB7' | 'Custom'
  params?: Array<{
    key?: string
    value?: string
    _key: string
  }>
}

export type SectionBlock = {
  _type: 'sectionBlock'
  content?: Array<
    | {
        children?: Array<{
          marks?: Array<string>
          text?: string
          _type: 'span'
          _key: string
        }>
        style?:
          | 'normal'
          | 'h1'
          | 'h2'
          | 'h3'
          | 'h4'
          | 'h5'
          | 'h6'
          | 'blockquote'
        listItem?: 'bullet' | 'number'
        markDefs?: Array<{
          href?: string
          _type: 'link'
          _key: string
        }>
        level?: number
        _type: 'block'
        _key: string
      }
    | {
        asset?: {
          _ref: string
          _type: 'reference'
          _weak?: boolean
          [internalGroqTypeReferenceTo]?: 'sanity.imageAsset'
        }
        hotspot?: SanityImageHotspot
        crop?: SanityImageCrop
        _type: 'image'
        _key: string
      }
  >
}

export type SanityImageCrop = {
  _type: 'sanity.imageCrop'
  top?: number
  bottom?: number
  left?: number
  right?: number
}

export type SanityImageHotspot = {
  _type: 'sanity.imageHotspot'
  x?: number
  y?: number
  height?: number
  width?: number
}

export type SanityImageAsset = {
  _id: string
  _type: 'sanity.imageAsset'
  _createdAt: string
  _updatedAt: string
  _rev: string
  originalFilename?: string
  label?: string
  title?: string
  description?: string
  altText?: string
  sha1hash?: string
  extension?: string
  mimeType?: string
  size?: number
  assetId?: string
  uploadId?: string
  path?: string
  url?: string
  metadata?: SanityImageMetadata
  source?: SanityAssetSourceData
}

export type SanityAssetSourceData = {
  _type: 'sanity.assetSourceData'
  name?: string
  id?: string
  url?: string
}

export type SanityImageMetadata = {
  _type: 'sanity.imageMetadata'
  location?: Geopoint
  dimensions?: SanityImageDimensions
  palette?: SanityImagePalette
  lqip?: string
  blurHash?: string
  hasAlpha?: boolean
  isOpaque?: boolean
}

export type Page = {
  _id: string
  _type: 'page'
  _createdAt: string
  _updatedAt: string
  _rev: string
  name?: string
  slug?: Slug
  pageSections?: Array<{
    _ref: string
    _type: 'reference'
    _weak?: boolean
    _key: string
    [internalGroqTypeReferenceTo]?: 'blogPost'
  }>
  seo?: {
    _ref: string
    _type: 'reference'
    _weak?: boolean
    [internalGroqTypeReferenceTo]?: 'seo'
  }
}

export type Seo = {
  _id: string
  _type: 'seo'
  _createdAt: string
  _updatedAt: string
  _rev: string
  headInput?: HeadInput
  seoMetaInput?: SeoMetaInput
  headOptions?: HeadOptions
  seoMetaOptions?: HeadOptions
}

export type HeadOptions = {
  _type: 'headOptions'
  mode?: 'server' | 'client'
  transform?: string
  tagPosition?: 'head' | 'bodyOpen' | 'bodyClose'
  tagPriority?: 'critical' | 'high' | 'low' | 'before' | 'after'
  processTemplateParams?: boolean
}

export type SeoMetaInput = {
  _type: 'seoMetaInput'
  title?: string
  titleTemplate?: string
  metaFlat?: MetaFlat
}

export type HeadInput = {
  _type: 'headInput'
  title?: string
  titleTemplate?: string
  templateParams?: TemplateParams
  base?: Base
  link?: Array<
    {
      _key: string
    } & Link
  >
  meta?: Array<
    {
      _key: string
    } & Meta
  >
  style?: Array<
    {
      _key: string
    } & Style
  >
  script?: Array<
    {
      _key: string
    } & Script
  >
  noscript?: Array<
    {
      _key: string
    } & Noscript
  >
  htmlAttrs?: HtmlAttrs
  bodyAttrs?: BodyAttrs
}

export type ReviewCategory = {
  _id: string
  _type: 'reviewCategory'
  _createdAt: string
  _updatedAt: string
  _rev: string
  category?: Category
}

export type BlogCategory = {
  _id: string
  _type: 'blogCategory'
  _createdAt: string
  _updatedAt: string
  _rev: string
  category?: Category
}

export type Category = {
  _type: 'category'
  title?: string
  slug?: Slug
  description?: string
}

export type MediaTag = {
  _id: string
  _type: 'media.tag'
  _createdAt: string
  _updatedAt: string
  _rev: string
  name?: Slug
}

export type Slug = {
  _type: 'slug'
  current?: string
  source?: string
}

export type AllSanitySchemaTypes =
  | SanityImagePaletteSwatch
  | SanityImagePalette
  | SanityImageDimensions
  | SanityFileAsset
  | Geopoint
  | BlogPost
  | Style
  | Script
  | Noscript
  | MetaFlatProfile
  | MetaFlatBook
  | MetaFlatArticle
  | Robots
  | Viewport
  | Meta
  | Link
  | MetaFlat
  | ResponsiveAsset
  | BodyAttrs
  | HtmlAttrs
  | Base
  | TemplateParams
  | SectionBlock
  | SanityImageCrop
  | SanityImageHotspot
  | SanityImageAsset
  | SanityAssetSourceData
  | SanityImageMetadata
  | Page
  | Seo
  | HeadOptions
  | SeoMetaInput
  | HeadInput
  | ReviewCategory
  | BlogCategory
  | Category
  | MediaTag
  | Slug
export declare const internalGroqTypeReferenceTo: unique symbol
// Source: server/api/blogs/[slug].get.ts
// Variable: getBlogPage
// Query:     *[_type == "page" && slug.current == $slug][0] {        "pageSectionRef": pageSections[_type == "blogPost"][0]._ref    }
export type GetBlogPageResult = {
  pageSectionRef: null
} | null
// Variable: getBlog
// Query:     *[_type == "blogPost" && _id == $pageSectionRef][0] {      title,      excerpt,      releaseTime,      timeToRead,      "mainImage": {        "altText": mainImage.altText,        "assetId": mainImage.mobileAsset.asset->_id,        "assetUrl": mainImage.mobileAsset.asset->url,        "caption": mainImage.mobileAsset.caption      },      body,      "categories": categories[]->category {        title,        "slug": slug.current      }    }  
export type GetBlogResult = {
  title: string | null
  excerpt: string | null
  releaseTime: string | null
  timeToRead: number | null
  mainImage: {
    altText: string | null
    assetId: string | null
    assetUrl: string | null
    caption: string | null
  }
  body: Array<
    | ({
        _key: string
      } & SectionBlock)
    | {
        children?: Array<{
          marks?: Array<string>
          text?: string
          _type: 'span'
          _key: string
        }>
        style?:
          | 'blockquote'
          | 'h1'
          | 'h2'
          | 'h3'
          | 'h4'
          | 'h5'
          | 'h6'
          | 'normal'
        listItem?: 'bullet' | 'number'
        markDefs?: Array<{
          href?: string
          _type: 'link'
          _key: string
        }>
        level?: number
        _type: 'block'
        _key: string
      }
    | {
        asset?: {
          _ref: string
          _type: 'reference'
          _weak?: boolean
          [internalGroqTypeReferenceTo]?: 'sanity.imageAsset'
        }
        hotspot?: SanityImageHotspot
        crop?: SanityImageCrop
        _type: 'image'
        _key: string
      }
  > | null
  categories: Array<{
    title: string | null
    slug: string | null
  } | null> | null
} | null
// Source: server/api/blogs/index.get.ts
// Variable: getBlogs
// Query:     {      "featuredBlog": *[_type == 'blogPost' && featured == true][0] {        "slug": *[_type == 'page' && references(^._id)][0].slug.current,        title,        excerpt,        timeToRead,        "mainImage": {          "altText": mainImage.altText,          "assetId": mainImage.mobileAsset.asset->_id,          "assetUrl": mainImage.mobileAsset.asset->url,          "caption": mainImage.mobileAsset.caption        }      },      "categoryList": *[_type == "blogCategory" && count(*[_type == "blogPost" && references(^._id)]) > 3] {        "slug": category.slug.current,        "title": category.title,        "posts": *[_type == "blogPost" && references(^._id)] | order(_createdAt desc) [0..2] {          "slug": *[_type == 'page' && references(^._id)][0].slug.current,          title,          excerpt,          timeToRead,          "mainImage": {            "altText": mainImage.altText,            "assetId": mainImage.mobileAsset.asset->_id,            "assetUrl": mainImage.mobileAsset.asset->url,            "caption": mainImage.mobileAsset.caption          }        }      }    }
export type GetBlogsResult = {
  featuredBlog: {
    slug: string | null
    title: string | null
    excerpt: string | null
    timeToRead: number | null
    mainImage: {
      altText: string | null
      assetId: string | null
      assetUrl: string | null
      caption: string | null
    }
  } | null
  categoryList: Array<{
    slug: string | null
    title: string | null
    posts: Array<{
      slug: string | null
      title: string | null
      excerpt: string | null
      timeToRead: number | null
      mainImage: {
        altText: string | null
        assetId: string | null
        assetUrl: string | null
        caption: string | null
      }
    }>
  }>
}
// Source: modules/affiliate-seo/runtime/composables/useAsyncSanity.ts
// Variable: getSeoMetadata
// Query:     *[_type == 'page' && slug.current == $slug] {      seo -> {        headInput,        seoMetaInput,        headOptions,        seoMetaOptions      }    }  
export type GetSeoMetadataResult = Array<{
  seo: {
    headInput: HeadInput | null
    seoMetaInput: SeoMetaInput | null
    headOptions: HeadOptions | null
    seoMetaOptions: HeadOptions | null
  } | null
}>
